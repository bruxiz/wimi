name: App + Dockerfile CI

on:
  pull_request:
    branches:
      - main
    paths:
      - app.py
      - Dockerfile
  push:
    branches:
      - main
    paths:
      - app.py
      - Dockerfile

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v2  # Note: Use v2, not v3 (as v3 is not officially released yet)
      - uses: actions/setup-python@v2
        with:
          python-version: '3.11.4'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Task
        run : sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Run tests
        run: task test

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v2

      - name: Install Task
        run : sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: task build VERSION=1.0.0

  publish-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Install Task
        run : sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Build Docker image
        run: task publish VERSION=${{ github.sha }}-$(date +'%Y%m%d%H%M%S') REGISTRY=bruxiz DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}

  deploy-on-eks:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: publish-docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Setup Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --name wimi-app --region us-east-1

      - name: Get EKS Cluster Info
        run: |
          kubectl cluster-info

  notify-slack:
    needs: [test, build-docker, publish-docker, deploy-on-eks]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,action,eventName,ref,workflow,job,took
          custom_payload: |
            {
              text: "${{ needs.test.result == 'failure' || needs.build-docker.result == 'failure' || needs.publish-docker.result == 'failure' && 'WIMI-CI Failed' || 'WIMI-CI Succeeded' }}",
              attachments: [
                {
                  title: "${{ github.actor }} pushed changes",
                  title_link: "https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}",
                  color: "${{ needs.test.result == 'failure' || needs.build-docker.result == 'failure' || needs.publish-docker.result == 'failure' && 'danger' || 'good' }}",
                  fields: [
                    {
                      title: 'Branch',
                      value: "${{ github.ref }}",
                      short: true
                    },
                    {
                      title: 'Action URL',
                      value: "${{ github.event.pull_request.html_url }}",
                      short: true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
