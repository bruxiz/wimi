name: App + Dockerfile CI

on:
  pull_request:
    branches:
      - main
    paths:
      - app.py
      - Dockerfile
  push:
    branches:
      - main
    paths:
      - app.py
      - Dockerfile

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
        with:
          python-version: '3.11.4'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Task
        run : sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Run tests
        run: task test

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v2

      - name: Install Task
        run : sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: task build VERSION=1.0.0

  publish-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.11.4'

      - name: Generate new version to GH Env
        run: |
          git fetch --tags
          python generate_version.py > version.txt
          echo "NEW_VERSION=$(cat version.txt)" >> $GITHUB_ENV

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Install Task
        run : sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Build Docker image
        run: task publish VERSION=${{ env.NEW_VERSION }} REGISTRY=bruxzi DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}

  notify-slack:
    needs: [test, build-docker, publish-docker]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,commit,author,action,eventName,ref,workflow,job,took
          custom_payload: |
            {
              text: "${{ needs.test.result == 'failure' || needs.build-docker.result == 'failure' || needs.publish-docker.result == 'failure' && 'WIMI-CI Failed' || 'WIMI-CI Succeeded' }}",
              attachments: [
                {
                  title: "${{ github.actor }} pushed changes",
                  title_link: "https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}",
                  color: "${{ needs.test.result == 'failure' || needs.build-docker.result == 'failure' || needs.publish-docker.result == 'failure' && 'danger' || 'good' }}",
                  fields: [
                    {
                      title: 'Branch',
                      value: "${{ github.ref }}",
                      short: true
                    },
                    {
                      title: 'Action URL',
                      value: "${{ github.event.pull_request.html_url }}",
                      short: true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
