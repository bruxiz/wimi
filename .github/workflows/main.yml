name: App + Dockerfile CI

on:
  pull_request:
    branches:
      - main
    paths:
      - app.py
      - Dockerfile
  push:
    branches:
      - main
    paths:
      - app.py
      - Dockerfile

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v2  # Note: Use v2, not v3 (as v3 is not officially released yet)
      - uses: actions/setup-python@v2
        with:
          python-version: '3.11.4'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Task
        run : sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Run tests
        run: task test

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v2

      - name: Install Task
        run : sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: task build VERSION=1.0.0

  publish-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch all tags
        run: git fetch --prune --tags

      - name: Get latest release tag
        id: latest_release
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0)"

      - name: Count commits since last release
        id: count_commits
        run: echo "::set-output name=count::$(git rev-list ${{ steps.latest_release.outputs.tag }}..HEAD --count)"

      - name: Generate new version
        id: generate_version
        run: |
          IFS='.' read -ra VER <<< "${{ steps.latest_release.outputs.tag }}"
          NEW_VERSION="${VER[0]}.${{ steps.count_commits.outputs.count }}.${VER[2]}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Install Task
        run : sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Build Docker image
        run: task publish VERSION=${{ env.NEW_VERSION }} DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}
